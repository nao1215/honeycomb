// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/nao1215/honeycomb/app/external"
	"github.com/nao1215/honeycomb/app/interactor"
	"github.com/nao1215/honeycomb/app/service"
	"github.com/nao1215/honeycomb/app/usecase"
)

// Injectors from wire.go:

// NewHoneyComb creates a new HoneyComb.
func NewHoneyComb(ctx context.Context) (*HoneyComb, error) {
	relayFinder := external.NewRelayFinder()
	eventsLister := external.NewEventsLister()
	profileGetter := interactor.NewProfileGetter(relayFinder, eventsLister)
	honeyComb := newHoneyComb(profileGetter, relayFinder)
	return honeyComb, nil
}

// wire.go:

// HoneyComb has business logic for honeycomb application.
type HoneyComb struct {
	usecase.ProfileGetter
	service.
		// ProfileGetter is the interface that wraps the basic GetProfile method.
		RelayFinder

	// RelayFinder is the interface that wraps the basic RelayFinder method.
}

// newHoneyComb creates a new HoneyComb.
func newHoneyComb(
	profileGetter usecase.ProfileGetter,
	relayFinder service.RelayFinder,
) *HoneyComb {
	return &HoneyComb{
		ProfileGetter: profileGetter,
		RelayFinder:   relayFinder,
	}
}
