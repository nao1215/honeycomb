// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/nao1215/honeycomb/app/external"
	"github.com/nao1215/honeycomb/app/interactor"
	"github.com/nao1215/honeycomb/app/usecase"
)

// Injectors from wire.go:

// NewHoneyComb creates a new HoneyComb.
func NewHoneyComb(ctx context.Context) (*HoneyComb, error) {
	relayFinder := external.NewRelayFinder()
	eventsLister := external.NewEventsLister()
	authorGetter := interactor.NewAuthorGetter(relayFinder, eventsLister)
	profileGetter := interactor.NewProfileGetter(eventsLister)
	followLister := interactor.NewFollowLister(eventsLister)
	publisher := external.NewPublisher()
	poster := interactor.NewPoster(publisher)
	timelineLister := interactor.NewTimelineLister(eventsLister)
	liker := interactor.NewLiker(publisher)
	honeyComb := newHoneyComb(authorGetter, profileGetter, followLister, poster, timelineLister, liker)
	return honeyComb, nil
}

// wire.go:

// HoneyComb has business logic for honeycomb application.
type HoneyComb struct {
	usecase.AuthorGetter
	usecase.
		// AuthorGetter is the interface that wraps the basic GetAuthor method.
		ProfileGetter
	usecase.FollowLister
	usecase.Poster
	usecase.TimelineLister
	usecase.Liker

	// ProfileGetter is the interface that wraps the basic GetProfile method.

	// Liker is the interface that wraps the basic Like method.
}

// newHoneyComb creates a new HoneyComb.
func newHoneyComb(
	authorGetter usecase.AuthorGetter,
	profileGetter usecase.ProfileGetter,
	followLister usecase.FollowLister,
	poster usecase.Poster,
	timelineLister usecase.TimelineLister,
	liker usecase.Liker,
) *HoneyComb {
	return &HoneyComb{
		AuthorGetter:   authorGetter,
		ProfileGetter:  profileGetter,
		FollowLister:   followLister,
		Poster:         poster,
		TimelineLister: timelineLister,
		Liker:          liker,
	}
}
